/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application,  since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 *
 *
 *
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xio.h"
#include "xil_exception.h"
#include "vga_periph_mem.h"
#include "minesweeper_sprites.h"
#include <stdlib.h>     /* srand, rand */
#include <time.h>
#define SIZE 9
#define UP 0b01000000
#define DOWN 0b00000100
#define LEFT 0b00100000
#define RIGHT 0b00001000
#define CENTER 0b00010000
#define SW0 0b00000001
#define SW1 0b00000010
#define BOMB '*'
#define NUM1 '1'
#define NUM2 '2'
#define NUM3 '3'
#define NUM4 '4'
#define BLANK '0'
#define FLAG '#'
#define NUMOFMINES 9
//BEG---unpened field
#define BEG '@'

int endOfGame;
int inc1;
int inc2;
int i, x, y, ii, oi, R, G, B, RGB, kolona, red, RGBgray;
int numOfFlags;
int flagTrue;
int randomCounter = 50;
int numOfMines;
int firstTimeCenter;
//map that is hidden from the user-it contains the solution
int solvedMap[9][9];
//map that has all of player's moves
char blankMap[9][9];
//map used for opening the blank fields that surround blank field selected
int indicationMap[9][9];
//matrica sa potezima igraca
int userInputMap[9][9];

//postavljeno ovde probe radi
int startX = 79, startY = 71, endX = 96, endY = 88;
int oldStartX = 79, oldStartY=71, oldEndX=96, oldEndY=88;

//end of game
/*
void printOutEndOfGame(char blankTable[SIZE][SIZE], char solvedMap[SIZE][SIZE]) {
	int i, j, ii, jj;
	for (i = 0; i < SIZE; i++) {
		for (j = 0; j < SIZE; j++) {
			ii = (i * 16) + 80;
			jj = (j * 16) + 80;
			if (blankTable[i][j] == FLAG) {
				if (solvedMap[i][j] != BOMB) {
					drawMap(16, 16, ii, jj, 16, 16);
				}
			} else if (blankTable[i][j] != FLAG && solvedMap[i][j] == BOMB) {
				drawMap(0, 16, ii, jj, 16, 16);
			}
		}
	}
}
*/

int proveriIspravnost(){
	int i,j = 0;

	for(i=0; i<9; i++){
		for(j=0; j<9; j++){
			if(userInputMap[i][j]>0){
				if (solvedMap[i][j] != userInputMap[i][j]){
					return 0;
				}
			}
		}
	}
	return 1;
}

int proveriKraj(){
	int ii, jj;

	for(ii=0; ii<9; ii++){
		for(jj=0; jj<9; jj++){
			if(!(userInputMap[ii][jj]>0 && userInputMap[ii][jj]==solvedMap[ii][jj])){
				return 0;
			}
		}
	}

	return 1;
}

void initializeSolvedMap(){
	solvedMap[0][0] = 6; solvedMap[0][1] = 7; solvedMap[0][2] = 5; solvedMap[0][3] = 1; solvedMap[0][4] = 9; solvedMap[0][5] = 8; solvedMap[0][6] = 4; solvedMap[0][7] = 2; solvedMap[0][8] = 3;
	solvedMap[1][0] = 4; solvedMap[1][1] = 1; solvedMap[1][2] = 9; solvedMap[1][3] = 3; solvedMap[1][4] = 2; solvedMap[1][5] = 6; solvedMap[1][6] = 8; solvedMap[1][7] = 7; solvedMap[1][8] = 5;
	solvedMap[2][0] = 8; solvedMap[2][1] = 3; solvedMap[2][2] = 2; solvedMap[2][3] = 4; solvedMap[2][4] = 5; solvedMap[2][5] = 7; solvedMap[2][6] = 6; solvedMap[2][7] = 1; solvedMap[2][8] = 9;
	solvedMap[3][0] = 7; solvedMap[3][1] = 4; solvedMap[3][2] = 1; solvedMap[3][3] = 6; solvedMap[3][4] = 3; solvedMap[3][5] = 5; solvedMap[3][6] = 9; solvedMap[3][7] = 8; solvedMap[3][8] = 2;
	solvedMap[4][0] = 5; solvedMap[4][1] = 8; solvedMap[4][2] = 3; solvedMap[4][3] = 2; solvedMap[4][4] = 1; solvedMap[4][5] = 9; solvedMap[4][6] = 7; solvedMap[4][7] = 4; solvedMap[4][8] = 6;
	solvedMap[5][0] = 9; solvedMap[5][1] = 2; solvedMap[5][2] = 6; solvedMap[5][3] = 8; solvedMap[5][4] = 7; solvedMap[5][5] = 4; solvedMap[5][6] = 5; solvedMap[5][7] = 3; solvedMap[5][8] = 1;
	solvedMap[6][0] = 3; solvedMap[6][1] = 9; solvedMap[6][2] = 7; solvedMap[6][3] = 5; solvedMap[6][4] = 8; solvedMap[6][5] = 1; solvedMap[6][6] = 2; solvedMap[6][7] = 6; solvedMap[6][8] = 4;
	solvedMap[7][0] = 1; solvedMap[7][1] = 5; solvedMap[7][2] = 4; solvedMap[7][3] = 7; solvedMap[7][4] = 6; solvedMap[7][5] = 2; solvedMap[7][6] = 3; solvedMap[7][7] = 9; solvedMap[7][8] = 8;
	solvedMap[8][0] = 2; solvedMap[8][1] = 6; solvedMap[8][2] = 8; solvedMap[8][3] = 9; solvedMap[8][4] = 4; solvedMap[8][5] = 3; solvedMap[8][6] = 1; solvedMap[8][7] = 5; solvedMap[8][8] = 7;
}

void initializeIndicationMap(){
	indicationMap[0][0] = 6; indicationMap[0][1] = 7; indicationMap[0][3] = 1;
	indicationMap[1][0] = 4; indicationMap[1][2] = 9; indicationMap[1][4] = 2;	indicationMap[1][7] = 7;
	indicationMap[2][2] = 2; indicationMap[2][3] = 4; indicationMap[2][4] = 5; indicationMap[2][6] = 6; indicationMap[2][8] = 9;
	indicationMap[3][4] = 3; indicationMap[3][7] = 8;
	indicationMap[4][0] = 5; indicationMap[4][8] = 6;
	indicationMap[5][1] = 2; indicationMap[5][4] = 7;
	indicationMap[6][0] = 3; indicationMap[6][2] = 7; indicationMap[6][4] = 8; indicationMap[6][5] = 1; indicationMap[6][6] = 2;
	indicationMap[7][1] = 5; indicationMap[7][4] = 6; indicationMap[7][6] = 3; indicationMap[7][8] = 8;
	indicationMap[8][5] = 3; indicationMap[8][7] = 5; indicationMap[8][8] = 7;
}

void initializeUserInputMap(){
	int i,j;

	for(i=0; i<9; i++){
		for(j=0; j<9; j++){
			userInputMap[i][j] = 0;
		}
	}

	for(i=0; i<9; i++){
		for(j=0; j<9; j++){
			if(indicationMap[i][j] > 0){
			userInputMap[i][j] = indicationMap[i][j];
			}
		}
	}
}

void drawPuzzle(){

	int indI, indJ;

	int tmpStartX = 79;
	int tmpStartY = 71;
	int drawStartX;
	int drawStartY;

	for(indI=0; indI<9; indI++){
		for(indJ=0; indJ<9; indJ++){
			if(indicationMap[indI][indJ] > 0){

				if(indI <3){
					drawStartX = tmpStartX + indI*16 +2;
				}
				if(indJ<3){
					drawStartY = tmpStartY + indJ*16 +2;
				}
				if(indI > 2 && indI < 6){
					drawStartX = tmpStartX + indI*16+2 + 1;
				}
				if(indI > 5){
					drawStartX = tmpStartX + indI*16+2 + 2;
				}
				if(indJ > 2 && indJ < 6){
					drawStartY = tmpStartY+ indJ*16+2 +1;
				}
				if(indJ > 5){
					drawStartY = tmpStartY+ indJ*16+ 2+2;
				}

				switch(indicationMap[indI][indJ]){
					case 1:
						drawMap(124 ,1, drawStartX, drawStartY, 13 ,13);
						break;
					case 2:
						drawMap(137 ,1, drawStartX, drawStartY, 13 ,13);
						break;
					case 3:
						drawMap(150 ,1, drawStartX, drawStartY, 13 ,13);
						break;
					case 4:
						drawMap(163 ,1, drawStartX, drawStartY, 13 ,13);
						break;
					case 5:
						drawMap(177 ,1, drawStartX, drawStartY, 13 ,13);
						break;
					case 6:
						drawMap(191 ,1, drawStartX, drawStartY, 13 ,13);
						break;
					case 7:
						drawMap(204 ,1, drawStartX, drawStartY, 13 ,13);
						break;
					case 8:
						drawMap(218 ,1, drawStartX, drawStartY, 13 ,13);
						break;
					default:
						drawMap(231 ,1, drawStartX, drawStartY, 13 ,13);
						break;
				}

			}
		}
	}
}

void drawSudokuGrid(){
	
	//parametri za unos startX, startY, endX, endY, vazi i za horizontalne i za vertikalne linije
	//vrednosti parametara uneti rucno i zapidati na papir kasnije da bi se ispravno iscrtavao kursor
	
	
	//horizontalne komponente
		drawingThickHorizontalLine(80, 70, 225, 0);
		drawingThinHorizontalLine(80, 87, 225, 0);
		drawingThinHorizontalLine(80, 103, 225, 0);

		drawingThickHorizontalLine(80, 119, 225, 0);
		drawingThinHorizontalLine(80, 136, 225, 0);
		drawingThinHorizontalLine(80, 152, 225, 0);

		drawingThickHorizontalLine(80, 168, 225, 0);
		drawingThinHorizontalLine(80, 185, 225, 0);
		drawingThinHorizontalLine(80, 201, 225, 0);

		drawingThickHorizontalLine(80, 217, 225, 0);

		//vertikalne komponente
		drawingThickVerticalLine(78, 70, 0, 219);
		drawingThinVerticalLine(95, 70, 0, 219);
		drawingThinVerticalLine(111, 70, 0, 219);

		drawingThickVerticalLine(127, 70, 0, 219);
		drawingThinVerticalLine(144, 70, 0, 219);
		drawingThinVerticalLine(160, 70, 0, 219);

		drawingThickVerticalLine(176, 70, 0, 219);
		drawingThinVerticalLine(193, 70, 0, 219);
		drawingThinVerticalLine(209, 70, 0, 219);

		drawingThickVerticalLine(225, 70, 0, 219);
}

//extracting pixel data from a picture for printing out on the display
void drawMap(int in_x, int in_y, int out_x, int out_y, int width, int height) {
	int ox, oy, oi, iy, ix, ii;
	for (y = 0; y < height; y++) {
		for (x = 0; x < width; x++) {
			ox = out_x + x;
			oy = out_y + y;
			oi = oy * 320 + ox;
			ix = in_x + x;
			iy = in_y + y;
			ii = iy * minesweeper_sprites.width + ix;
			R = minesweeper_sprites.pixel_data[ii
					* minesweeper_sprites.bytes_per_pixel] >> 5;
			G = minesweeper_sprites.pixel_data[ii
					* minesweeper_sprites.bytes_per_pixel + 1] >> 5;
			B = minesweeper_sprites.pixel_data[ii
					* minesweeper_sprites.bytes_per_pixel + 2] >> 5;
			R <<= 6;
			G <<= 3;
			RGB = R | G | B;

			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF
							+ oi * 4, RGB);
		}
	}
}


//funkija za iscrtavanje linija koje sluze kao okvir 3x3 tabele
//ovo je tanka linije, unutrasnja
void drawingThinHorizontalLine(int startX, int startY, int endX, int endY){
	int x,y;
	for (x = startX; x < endX; x++){
		for(y = startY; y < startY+1; y++){
			i = y*320+x;
			VGA_PERIPH_MEM_mWriteMemory(
								XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF
										+ i * 4, 0x000000);
		}
	}
}

//iscrtavanje debele linije koja sluzi kao okvir sudoku tabele i unutrasnja granica izmedju 3x3 polja
void drawingThickHorizontalLine(int startX, int startY, int endX, int endY){
	int x,y;
	for(x = startX; x<endX; x++){
		for(y=startY; y<startY+2; y++){    //ovde mozda i startY+3 zavisno od toga kako ispadne ovako
			i = y*320+x;
			VGA_PERIPH_MEM_mWriteMemory(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF + i*4, 0x000000);
		}
	}
}

//sad iscrtavanje tanke vertikalne linije po uzoru na drawingCursor
void drawingThinVerticalLine(int startX, int startY, int endX, int endY){
	for (x = startX; x < startX + 1; x++) {
		for (y = startY; y < endY; y++) {
			i = y * 320 + x;
			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF
							+ i * 4, 0x000000);
		}
	}
}

//iscrtavanje debele vertikalne linije
void drawingThickVerticalLine(int startX, int startY, int endX, int endY){
	for (x = startX; x < startX + 2; x++) {   //ili startX +3 ako treba
		for (y = startY; y < endY; y++) {
			i = y * 320 + x;
			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF
							+ i * 4, 0x000000);
		}
	}
}

//funkcija za brisanje kursora sa prethodnog polja nekon sto se predje na naredno
//u sustini ista kao i drawingCursor s tim da se umesto crne boje iscrtava boja pozadine na mestu prethodnog kursora
void deleteCursor(int startX, int startY, int endX, int endY){
	
	//ovde je samo potrebno uneti odgovarajuce koordinate koje  u stvari predstavljaju koordinate prethodne pozicije kursora
	//boja koja se iscrtava mora biti ista kao i pozadina
	
	//posto je ideja da se kursor odvoji od ivice pojedinacnog polja onda se ovde moze ubaciti 
	//for(y=startY+1; y<startY+2; y++) s tim da moze i y<startY+3 zavisno od toga kako izgleda
	//slicna logika vazi i za naredne tri petnje ispod
	for (x = startX+1; x < endX-1; x++) {
		for (y = startY+1; y < startY + 2; y++) {
			i = y * 320 + x;
			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF
							+ i * 4, 0xFFFFFF);
		}
	}

	//for (y = endY - 2; y < endY-1; y++) 
	for (x = startX+1; x < endX-1; x++) {
		for (y = endY - 2; y < endY-1; y++) {
			i = y * 320 + x;
			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF
							+ i * 4, 0xFFFFFF);
		}
	}

	//for (x = startX+1; x < startX + 2; x++)
	for (x = startX+1; x < startX + 2; x++) {
		for (y = startY+1; y < endY-1; y++) {
			i = y * 320 + x;
			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF
							+ i * 4, 0xFFFFFF);
		}
	}

	//for (x = endX - 2; x < endX-1; x++) 
	for (x = endX - 2; x < endX-1; x++) {
		for (y = startY+1; y < endY-1; y++) {
			i = y * 320 + x;
			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF
							+ i * 4, 0xFFFFFF);
		}
	}
}

//drawing cursor for indicating position
void drawingCursor(int startX, int startY, int endX, int endY) {

	//posto je ideja da se kursor odvoji od ivice pojedinacnog polja onda se ovde moze ubaciti 
	//for(y=startY+1; y<startY+2; y++) s tim da moze i y<startY+3 zavisno od toga kako izgleda
	//slicna logika vazi i za naredne tri petnje ispod
	for (x = startX+1; x < endX-1; x++) {
		for (y = startY+1; y < startY + 2; y++) {
			i = y * 320 + x;
			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF
							+ i * 4, 0x00FF00);
		}
	}

	//for (y = endY - 2; y < endY-1; y++) 
	for (x = startX+1; x < endX-1; x++) {
		for (y = endY - 2; y < endY-1; y++) {
			i = y * 320 + x;
			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF
							+ i * 4, 0x00FF00);
		}
	}

	//for (x = startX+1; x < startX + 2; x++)
	for (x = startX+1; x < startX + 2; x++) {
		for (y = startY +1 ; y < endY-1; y++) {
			i = y * 320 + x;
			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF
							+ i * 4, 0x00FF00);
		}
	}

	//for (x = endX - 2; x < endX-1; x++) 
	for (x = endX - 2; x < endX-1; x++) {
		for (y = startY +1; y < endY-1; y++) {
			i = y * 320 + x;
			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF
							+ i * 4, 0x00FF00);
		}
	}

}

//function that controls switches and buttons
void move() {
	//int startX = 79, startY = 71, endX = 96, endY = 88;
	//int oldStartX = 79, oldStartY=71, oldEndX=96, oldEndY=88;
	int odabraniBroj = 0;

	int x, y, ic, ib, i, j;
	int prethodnoStanje;
	typedef enum {
		NOTHING_PRESSED, SOMETHING_PRESSED
	} btn_state_t;
	btn_state_t btn_state = NOTHING_PRESSED;

	drawingCursor(startX, startY, endX, endY);

	while (endOfGame != 1) {

		if (btn_state == NOTHING_PRESSED) {
			btn_state = SOMETHING_PRESSED;
			if ((Xil_In32(XPAR_MY_PERIPHERAL_0_BASEADDR) & DOWN) == 0) {
				drawMap(136, 28, 30, 30, 80, 13);  //prazno polje
				drawMap(136, 28, 100, 30, 80, 13); //prazno polje
				if (endY < 206) {
					odabraniBroj=0;
					oldStartY = startY;
					oldEndY = endY;
					startY += 16;
					endY += 16;

					if(startY ==119 || startY==168){
						oldStartY++;
						oldEndY++;
						startY++;
						endY++;
						deleteCursor(startX, oldStartY-1, endX, oldEndY-1);
					}

					drawingCursor(startX, startY, endX, endY);
					if(startY!=120 && startY!=169){
						deleteCursor(startX, oldStartY, endX, oldEndY);
					}
				}

			}

			else if ((Xil_In32(XPAR_MY_PERIPHERAL_0_BASEADDR) & RIGHT) == 0) {
				drawMap(136, 28, 30, 30, 80, 13);  //prazno polje
				drawMap(136, 28, 100, 30, 80, 13); //prazno polje
				randomCounter++;
				if (endX < 224) {
					odabraniBroj=0;
					oldStartX = startX;
					oldEndX = endX;
					startX += 16;
					endX += 16;

					if(startX == 127 || startX==176){
						oldStartX++;
						oldEndX++;
						startX++;
						endX++;
						deleteCursor(oldStartX-1, startY, oldEndX-1, endY);
					}


					drawingCursor(startX, startY, endX, endY);
					if(startX!=128 && startX!=177){
					deleteCursor(oldStartX, startY, oldEndX, endY);
					}
				}
			} else if ((Xil_In32(XPAR_MY_PERIPHERAL_0_BASEADDR) & LEFT) == 0) {
				drawMap(136, 28, 30, 30, 80, 13);  //prazno polje
				drawMap(136, 28, 100, 30, 80, 13); //prazno polje
				if (startX > 81) {
					odabraniBroj=0;
					oldStartX = startX;
					oldEndX = endX;
					startX -= 16;
					endX -= 16;

					if(startX==161 || startX==112){
						oldStartX--;
						oldEndX--;
						startX--;
						endX--;
						deleteCursor(oldStartX+1, startY, oldEndX+1, endY);
					}

					drawingCursor(startX, startY, endX, endY);
					if(startX!=160 && startX!= 111){
						deleteCursor(oldStartX, startY, oldEndX, endY);
					}
				}

			} else if ((Xil_In32(XPAR_MY_PERIPHERAL_0_BASEADDR) & UP) == 0) {
				drawMap(136, 28, 30, 30, 80, 13);  //prazno polje
				drawMap(136, 28, 100, 30, 80, 13); //prazno polje
				if (startY > 81) {
					odabraniBroj=0;
					oldStartY = startY;
					oldEndY = endY;
					startY -= 16;
					endY -= 16;

					if(startY==153 || startY==104){
						oldStartY--;
						oldEndY--;
						startY--;
						endY--;
						deleteCursor(startX, oldStartY+1, endX, oldEndY+1);
					}

					drawingCursor(startX, startY, endX, endY);
					if(startY!=152 && startY!=103){
						deleteCursor(startX, oldStartY, endX, oldEndY);
					}
				}

			} else if ((Xil_In32(XPAR_MY_PERIPHERAL_0_BASEADDR) & CENTER)      //akcija nakon pritiskanja tastera JOY2 tj. MIDDLE_JOY
					== 0) {
				drawMap(136, 28, 30, 30, 80, 13);  //prazno polje
				drawMap(136, 28, 100, 30, 80, 13); //prazno polje

				int ii, jj;

				switch(startX){
					case 79:
						ii=0;
						break;
					case 95:
						ii=1;
						break;
					case 111:
						ii=2;
						break;
					case 128:
						ii=3;
						break;
					case 144:
						ii=4;
						break;
					case 160:
						ii=5;
						break;
					case 177:
						ii=6;
						break;
					case 193:
						ii=7;
						break;
					default:
						ii=8;
						break;
				}

				switch(startY){
					case 71:
						jj = 0;
						break;
					case 87:
						jj = 1;
						break;
					case 103:
						jj = 2;
						break;
					case 120:
						jj = 3;
						break;
					case 136:
						jj = 4;
						break;
					case 152:
						jj = 5;
						break;
					case 169:
						jj = 6;
						break;
					case 185:
						jj = 7;
						break;
					case 201:
						jj = 8;
						break;
				}


				odabraniBroj++;
				if(odabraniBroj > 9){
					odabraniBroj = 1;
				}

				int i;
				for(i=0; i<1000000; i++){
					//ovo umesto sleep-a
				}
				
				//----------------------------------------------------------------------------------------------------
				//OVDE JE POTREBNO UCRTATI ODABRANI BROJ NA ODGOVARAJUCE POLJE U SUDOKU TABELU PRE POVRATKA NA TABELU
				//----------------------------------------------------------------------------------------------------
				
				if(!(indicationMap[ii][jj] > 0)){
				switch(odabraniBroj){
					//od vrednosti promenljive startXCenter zavisi gde se poslednje stalo pre odabiranja odnosno koji je broj odabran
					case 1:
						//ovde cu znati o kojoj vrednosti se radi
						//potom imam koordinate gde se sam se zaustavio u sudoku tabeli ranije i tamo na tom mestu ucrtavam odgovarajuci broj
						drawMap(0, 1, startX+2, startY+2, 13, 13);

						//potrebno upisati ovo u userInputMap
						userInputMap[ii][jj] = odabraniBroj;

						break;
					
					//ovako za svih devet vrednosti
					
					case 2:
						//ovde cu znati o kojoj vrednosti se radi
						//potom imam koordinate gde se sam se zaustavio u sudoku tabeli ranije i tamo na tom mestu ucrtavam odgovarajuci broj
						drawMap(14, 1, startX+2, startY+2, 13, 13);
						userInputMap[ii][jj] = odabraniBroj;
						break;
					case 3:
						//ovde cu znati o kojoj vrednosti se radi
						//potom imam koordinate gde se sam se zaustavio u sudoku tabeli ranije i tamo na tom mestu ucrtavam odgovarajuci broj
						drawMap(27, 1, startX+2, startY+2, 13, 13);
						userInputMap[ii][jj] = odabraniBroj;
						break;
					case 4:
						//ovde cu znati o kojoj vrednosti se radi
						//potom imam koordinate gde se sam se zaustavio u sudoku tabeli ranije i tamo na tom mestu ucrtavam odgovarajuci broj
						drawMap(40, 1, startX+2, startY+2, 13, 13);
						userInputMap[ii][jj] = odabraniBroj;
						break;
					case 5:
						//ovde cu znati o kojoj vrednosti se radi
						//potom imam koordinate gde se sam se zaustavio u sudoku tabeli ranije i tamo na tom mestu ucrtavam odgovarajuci broj
						drawMap(55, 1, startX+2, startY+2, 13, 13);
						userInputMap[ii][jj] = odabraniBroj;
						break;
					case 6:
						//ovde cu znati o kojoj vrednosti se radi
						//potom imam koordinate gde se sam se zaustavio u sudoku tabeli ranije i tamo na tom mestu ucrtavam odgovarajuci broj
						drawMap(68
								, 1, startX+2, startY+2, 13, 13);
						userInputMap[ii][jj] = odabraniBroj;
						break;
					case 7:
						//ovde cu znati o kojoj vrednosti se radi
						//potom imam koordinate gde se sam se zaustavio u sudoku tabeli ranije i tamo na tom mestu ucrtavam odgovarajuci broj
						drawMap(82, 1, startX+2, startY+2, 13, 13);
						userInputMap[ii][jj] = odabraniBroj;
						break;
					case 8:
						//ovde cu znati o kojoj vrednosti se radi
						//potom imam koordinate gde se sam se zaustavio u sudoku tabeli ranije i tamo na tom mestu ucrtavam odgovarajuci broj
						drawMap(95, 1, startX+2, startY+2, 13, 13);
						userInputMap[ii][jj] = odabraniBroj;
						break;
					default:
						//u slucaju da je odabrana devetka
						drawMap(108, 1, startX+2, startY+2, 13, 13);
						userInputMap[ii][jj] = odabraniBroj;
						break;
				}
				}
				
				//jedan od sviceva moze da sluzi za brisanje pogresno unetog broj ili jednostavno za brisanje broja po zelji iz tabele
			} else if ((Xil_In32(XPAR_MY_PERIPHERAL_0_BASEADDR) & SW0) != 0) { //flag

				int check = proveriKraj();

				if(check == 1){
					//ispisuje na ekranu KRAJ
					drawMap(136, 14, 30, 30, 13, 13);  //K
					drawMap(1, 28, 44, 30, 13, 13); //R
					drawMap(1, 14, 58, 30, 13, 13); //A
					drawMap(128, 14, 72, 30, 13, 13); //J
					endOfGame = 1; //doslo se do kraja igre, onemoguciti dalje pomeranje po tabli i upisivanje
				}else{
					//ipsisati da jos nije kraj igre
					//ispisuje NIJE KRAJ NA EKRANU
					drawMap(186, 14, 30, 30, 13, 13);//N
					drawMap(114, 14, 44, 30, 10, 13); //I
					drawMap(128, 14, 48, 30, 13, 13); //J
					drawMap(62, 14, 60, 30, 13, 13); //A
					drawMap(136, 14, 80, 30, 13, 13);  //K
					drawMap(1, 28, 94, 30, 13, 13); //R
					drawMap(1, 14, 108, 30, 13, 13); //A
					drawMap(128, 14, 122, 30, 13, 13); //J
				}
			} else if ((Xil_In32(XPAR_MY_PERIPHERAL_0_BASEADDR) & SW1) != 0) {


				int ispravno = proveriIspravnost();

				if(ispravno == 1){
					//ispisati da je unos ispravan
					drawMap(47, 14, 30, 30, 13, 13); //D
					drawMap(198, 14, 40, 30, 13, 13);  //O
					drawMap(14, 14, 52, 30, 13, 13); //B
					drawMap(1, 14, 65, 30, 13, 13); //A
					drawMap(1, 28, 77, 30, 13, 13); //R
					drawMap(45, 28, 104, 30, 13, 13); //U
					drawMap(186, 14, 117, 30, 13, 13);//N
					drawMap(198, 14, 126, 30, 13, 13);  //O
					drawMap(15, 28, 138, 30, 13, 13); //S
				} else {
					//ispisati da je unos neispravan
					drawMap(150, 14, 30, 30, 13, 13);  //L
					drawMap(198, 14, 44, 30, 13, 13);  //O
					drawMap(15, 28, 58, 30, 13, 13); //S
					drawMap(45, 28, 80, 30, 13, 13); //U
					drawMap(186, 14, 94, 30, 13, 13);//N
					drawMap(198, 14, 104, 30, 13, 13);  //O
					drawMap(15, 28, 117, 30, 13, 13); //S
				}
			} else {
				btn_state = NOTHING_PRESSED;
			}
		} else { // SOMETHING_PRESSED
			if ((Xil_In32(XPAR_MY_PERIPHERAL_0_BASEADDR) & DOWN) == 0) {
			} else if ((Xil_In32(XPAR_MY_PERIPHERAL_0_BASEADDR) & RIGHT) == 0) {
			} else if ((Xil_In32(XPAR_MY_PERIPHERAL_0_BASEADDR) & LEFT) == 0) {
			} else if ((Xil_In32(XPAR_MY_PERIPHERAL_0_BASEADDR) & UP) == 0) {
			} else if ((Xil_In32(XPAR_MY_PERIPHERAL_0_BASEADDR) & CENTER)
					== 0) {
			} else if ((Xil_In32(XPAR_MY_PERIPHERAL_0_BASEADDR) & SW0) != 0) {
			} else if ((Xil_In32(XPAR_MY_PERIPHERAL_0_BASEADDR) & SW1) != 0) {
			} else {
				btn_state = NOTHING_PRESSED ;
			}
		}

		int i;
		for(i=0; i<100000; i++){
			//ovo umesto sleep-a
		}
	}
}

int main() {

	//int j, p, r;
	//inc1 = 0;
	//inc2 = 0;
	//numOfFlags = NUMOFMINES;
	//flagTrue = 0;
	//numOfMines = NUMOFMINES;
	//firstTimeCenter = 0;

	init_platform();

	VGA_PERIPH_MEM_mWriteMemory(
			XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x00, 0x0); // direct mode   0
	VGA_PERIPH_MEM_mWriteMemory(
			XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x04, 0x3); // display_mode  1  bilo 0x3 na pocetku
	VGA_PERIPH_MEM_mWriteMemory(
			XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x08, 0x0); // show frame      2
	VGA_PERIPH_MEM_mWriteMemory(
			XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x0C, 0xff); // font size       3
	VGA_PERIPH_MEM_mWriteMemory(
			XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x10, 0x000000); // foreground 4
	VGA_PERIPH_MEM_mWriteMemory(
			XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x14, 0x000000); // background color 5
	VGA_PERIPH_MEM_mWriteMemory(
			XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x18, 0xFF0000); // frame color      6
	VGA_PERIPH_MEM_mWriteMemory(
			XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + 0x20, 1) ;

	//white background
	for (x = 0; x < 320; x++) {
		for (y = 0; y < 240; y++) {
			i = y * 320 + x;
			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF
							+ i * 4, 0xFFFFFF);
		}
	}

	set_cursor(66);
	clear_text_screen(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR);
	print_string(XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR, "SCORE", strlen("SCORE"));

	//iscrtavanje sudoku table
	drawSudokuGrid();

	//pocetna mapa
	initializeIndicationMap() ;

	//mapa sa pocetnim vrednostima i vrednostima koje unosi korisnik
	initializeUserInputMap();

	//resena mapa
	initializeSolvedMap() ;

	//iscrtavanje slagalice na osnovu indicationMap-a
	drawPuzzle();

	//moving through the table
	move();

	cleanup_platform();

	return 0;
}
